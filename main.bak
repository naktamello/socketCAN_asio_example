#include <iostream>
#include <boost/asio.hpp>
#include <boost/thread/thread.hpp>

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wmissing-noreturn"
using boost::asio::ip::tcp;

std::string make_daytime_string() {
    using namespace std;
    time_t now = time(0);
    return ctime(&now);
}

class tcp_connection : public boost::enable_shared_from_this<tcp_connection> {
public:
    using pointer = boost::shared_ptr<tcp_connection>;

    static pointer create(boost::asio::io_service &io_service) {
        return pointer(new tcp_connection(io_service));
    }

    tcp::socket &socket() {
        return socket_;
    }

    void start() {
//        tx_ = make_daytime_string();
//        boost::asio::async_write(socket_, boost::asio::buffer(tx_),
//                boost::bind(&tcp_connection::handle_write, shared_from_this(),
//                        boost::asio::placeholders::error,
//                        boost::asio::placeholders::bytes_transferred));
//        std::cout << "wrote message:" << std::endl;
//        boost::this_thread::sleep(boost::posix_time::seconds(1));

        socket_.async_read_some(boost::asio::buffer(rx_, max_length),
                                boost::bind(&tcp_connection::handle_read, this,
                                            boost::asio::placeholders::error,
                                            boost::asio::placeholders::bytes_transferred));
    }

private:
    explicit tcp_connection(boost::asio::io_service &io_service) : socket_(io_service) {}

    tcp::socket socket_;
    enum {
        max_length = 1024
    };
    char rx_[max_length];
    std::string tx_;

    void handle_write(const boost::system::error_code &err, size_t) {}

    void handle_read(const boost::system::error_code &err, size_t) {
        if (!err) {
            std::cout << "recv: " + std::string(rx_) << std::endl;
            socket_.async_read_some(boost::asio::buffer(rx_, max_length),
                                    boost::bind(&tcp_connection::handle_read, this,
                                                boost::asio::placeholders::error,
                                                boost::asio::placeholders::bytes_transferred));
        }
        else{
            std::cerr << "err (recv): " << err.message() << std::endl;
        }
    }

};

class tcp_server {
public:
    tcp_server(boost::asio::io_service &io_service) : acceptor_(io_service, tcp::endpoint(tcp::v4(), 1978)) {
        start_accept();
    }

    tcp::acceptor acceptor_;
private:
    void start_accept() {
        tcp_connection::pointer new_connection =
                tcp_connection::create(acceptor_.get_io_service());

        acceptor_.async_accept(new_connection->socket(),
                               boost::bind(&tcp_server::handle_accept, this, new_connection,
                                           boost::asio::placeholders::error));
    }

    void handle_accept(tcp_connection::pointer new_connection, const boost::system::error_code &error) {
        if (!error) {
            new_connection->start();
            start_accept();
        }
    }
};

int synchronous() {
    try {
        boost::asio::io_service io_service;
        tcp::acceptor acceptor(io_service, tcp::endpoint(tcp::v4(), 1978));
        std::cout << "opening port 1978" << std::endl;
        tcp::socket socket(io_service);
        std::cout << "waiting for connection..." << std::endl;
        acceptor.accept(socket);
        std::cout << "connected!" << std::endl;
        for (;;) {
            std::string message = make_daytime_string();
            boost::system::error_code ignored_error;
            size_t written = boost::asio::write(socket, boost::asio::buffer(message), boost::asio::transfer_all(),
                                                ignored_error);
            std::cout << "wrote message:" << written << std::endl;
            boost::this_thread::sleep(boost::posix_time::seconds(1));
        }
    }
    catch (std::exception &e) {
        std::cout << e.what() << std::endl;
    }
}

int asynchronous() {
    try {
        boost::asio::io_service io_service;
        tcp_server server(io_service);
        io_service.run();
    }
    catch (std::exception &e) {
        std::cout << e.what() << std::endl;
    }
}

int main() {
    asynchronous();

    return 0;
}

#pragma clang diagnostic pop